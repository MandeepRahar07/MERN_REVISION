mamoizaationa and caching +> anything  we will using in future we save it result caching 

cache => 
    in computing a hche is a hardware or software component that stores data future request for
    that data can be served faster; the data stored in a ceche might be the result of an earliar compputation or a copy of datasored eveywhere
   
   cache is not permanent;

Database =>
SQL - MySQL, Postgres
NoAQL = MongoDB
GrapghDB - neo4j
KV - Key Value


Redis =>

Remote Dictionary Server
Re     di          S
Redis
it is an open source tool
it is a key-Value type MongoDB
it stores data and maintain it in-Memory



Redis 
it is used for caching
it is also used as a MongoDB
Pub/Sub operations (301)
Implementing message queues (imp)

Redis Data type 

String 
List (array)
Set ( other way object )
Sorted Set
Hash

Redis.io and explore the data type of the redis 


Caching and Caching Techniques:

Caching is a crucial technique in computing to speed up data access by storing frequently used data in a cache, which can be a hardware or software component.
Cached data can be used to serve future requests faster, reducing the need to recompute or retrieve data from slower storage systems like databases.
Caches are not permanent and have a limited capacity, which means they need to be managed carefully to ensure that the most relevant data is stored.
Common caching techniques include in-memory caching, distributed caching, and content delivery networks (CDNs).
Redis - Remote Dictionary Server:

Redis is an open-source, high-performance, and in-memory data store that operates as a key-value database.
It's often used for caching, as well as for maintaining and processing data in-memory, making it an excellent choice for scenarios where low-latency data access is critical.
Redis supports various data types, including strings, lists, sets, sorted sets, and hashes.
Examples of Redis Data Types:

String: Redis stores data as key-value pairs, where the value can be a simple string. For example, caching a user's session data:

shell
Copy code
SET user:1234:session "user_data_here"
List (Array): Redis lists are ordered collections of strings. They are useful for implementing features like message queues or managing a list of recent activities.

shell
Copy code
LPUSH recent_activities "Activity 1"
LPUSH recent_activities "Activity 2"
Set: Redis sets are collections of unique strings, suitable for storing non-repeating items. For example, maintaining a set of unique tags associated with a post:

shell
Copy code
SADD post:1:tags "tag1"
SADD post:1:tags "tag2"
Sorted Set: Similar to sets, but each item has a score, and items are ordered by their score. Useful for leaderboards or ranking systems.

shell
Copy code
ZADD leaderboard 100 "PlayerA"
ZADD leaderboard 200 "PlayerB"
Hash: Redis hashes store field-value pairs. They are handy for storing structured data. For instance, storing user details:

shell
Copy code
HSET user:1234 name "John Doe"
HSET user:1234 email "johndoe@example.com"
Redis Use Cases:

Caching: As mentioned, Redis is widely used for caching to accelerate data access by storing frequently accessed data in-memory.
Real-time Analytics: Redis is great for aggregating real-time data and analytics, as it can quickly process and update data in-memory.
Pub/Sub Operations: Redis supports publish/subscribe mechanisms, enabling communication between different components of an application.
Message Queues: Redis can be used as a message broker to manage tasks and communication between various parts of an application.
Remember that Redis is a versatile tool with various data structures and use cases. Keeping these updated notes and examples handy will help you understand and make the most of Redis in your future projects.